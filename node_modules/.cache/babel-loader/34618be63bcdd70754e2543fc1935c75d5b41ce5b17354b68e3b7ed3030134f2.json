{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[2] || (_cache[2] = _createElementVNode(\"h1\", null, \"Transcription Audio\", -1 /* HOISTED */)), _createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: _cache[0] || (_cache[0] = (...args) => $options.onFileChange && $options.onFileChange(...args))\n  }, null, 32 /* NEED_HYDRATION */), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.uploadFile && $options.uploadFile(...args))\n  }, \"Transcrire\"), $data.transcript ? (_openBlock(), _createElementBlock(\"p\", _hoisted_1, _toDisplayString($data.transcript), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["key","_createElementBlock","_createElementVNode","type","onChange","_cache","args","$options","onFileChange","onClick","uploadFile","$data","transcript","_hoisted_1","_toDisplayString","_createCommentVNode"],"sources":["/home/fossa/Documents/training/trans-app/src/components/Upload.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Transcription Audio</h1>\n    <input type=\"file\" @change=\"onFileChange\" />\n    <button @click=\"uploadFile\">Transcrire</button>\n    <p v-if=\"transcript\">{{ transcript }}</p>\n  </div>\n</template>\n<script>\nimport axios from 'axios';\nexport default {\n  name: 'UploadFile',\n  data() {\n    return {\n      file: null,\n      transcript: '',\n    };\n  },\n  methods: {\n    onFileChange(event) {\n      this.file = event.target.files[0];\n    },\n    async uploadFile() {\n      const formData = new FormData();\n      formData.append('file', this.file);\n      try {\n        const response = await axios.post('http://localhost:3000/transcription', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n          },\n        });\n        this.transcript = response.data;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n  },\n};\n</script>"],"mappings":";;EAAAA,GAAA;AAAA;;uBACEC,mBAAA,CAKM,c,0BAJJC,mBAAA,CAA4B,YAAxB,qBAAmB,sBACvBA,mBAAA,CAA4C;IAArCC,IAAI,EAAC,MAAM;IAAEC,QAAM,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,YAAA,IAAAD,QAAA,CAAAC,YAAA,IAAAF,IAAA,CAAY;qCACxCJ,mBAAA,CAA+C;IAAtCO,OAAK,EAAAJ,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAG,UAAA,IAAAH,QAAA,CAAAG,UAAA,IAAAJ,IAAA,CAAU;KAAE,YAAU,GAC7BK,KAAA,CAAAC,UAAU,I,cAAnBX,mBAAA,CAAyC,KAL7CY,UAAA,EAAAC,gBAAA,CAK4BH,KAAA,CAAAC,UAAU,oBALtCG,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}